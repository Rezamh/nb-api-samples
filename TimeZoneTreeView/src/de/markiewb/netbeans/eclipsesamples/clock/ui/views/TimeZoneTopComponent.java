/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.markiewb.netbeans.eclipsesamples.clock.ui.views;

import de.markiewb.netbeans.eclipsesamples.clock.ui.views.TimeZoneComparator.TimeZoneRegion;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import org.netbeans.api.annotations.common.StaticResource;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.*;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//de.markiewb.netbeans.eclipsesamples.clock.ui.views//TimeZone//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TimeZoneTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "de.markiewb.netbeans.eclipsesamples.clock.ui.views.TimeZoneTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TimeZoneAction",
        preferredID = "TimeZoneTopComponent"
)
@Messages({
    "CTL_TimeZoneAction=TimeZone",
    "CTL_TimeZoneTopComponent=TimeZone Window",
    "HINT_TimeZoneTopComponent=This is a TimeZone window"
})
public final class TimeZoneTopComponent extends TopComponent implements ExplorerManager.Provider {

    @StaticResource
    private static final String icon = "de/markiewb/netbeans/eclipsesamples/clock/ui/views/netbeans.gif";

    public TimeZoneTopComponent() {
        initComponents();
        setName(Bundle.CTL_TimeZoneTopComponent());
        setToolTipText(Bundle.HINT_TimeZoneTopComponent());
        setLayout(new BorderLayout());
        OutlineView view = new OutlineView();
        this.add(view, BorderLayout.CENTER);

        //show a treeview with timezones per region
        Node rootNode = new AbstractNode(Children.create(new TimeZoneRegionNodeFactory(), true));
        rootNode.setDisplayName("TimeZones");

        mgr.setRootContext(rootNode);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private final ExplorerManager mgr = new ExplorerManager();

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    private static class TimeZoneRegionNodeFactory extends ChildFactory<TimeZoneComparator.TimeZoneRegion> {

        @Override
        protected boolean createKeys(List<TimeZoneRegion> toPopulate) {
            Collection<TimeZoneRegion> timeZonesAsObjects = TimeZoneComparator.getTimeZonesAsObjects();
            toPopulate.addAll(timeZonesAsObjects);
            return true;
        }

        @Override
        protected Node createNodeForKey(TimeZoneRegion region) {
            AbstractNode result = new AbstractNode(Children.create(new TimeZoneNodeFactory(region.getTimeZones()), true));
            result.setDisplayName(region.getName());
            result.setIconBaseWithExtension(icon);
            return result;
        }

    }

    private static class TimeZoneNodeFactory extends ChildFactory<TimeZone> {

        private final Set<TimeZone> timeZones;

        private TimeZoneNodeFactory(Set<TimeZone> timeZones) {
            this.timeZones = timeZones;
        }

        @Override
        protected boolean createKeys(List<TimeZone> toPopulate) {
            toPopulate.addAll(timeZones);
            return true;
        }

        @Override
        protected Node createNodeForKey(TimeZone key) {
            Node result;
            result = new AbstractNode(Children.LEAF);
            result.setDisplayName(key.getDisplayName());
            return result;
        }

    }
}
